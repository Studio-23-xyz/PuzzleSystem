{
  "api/Studio23.SS2.PuzzleSystem.Core.CombinationDialPuzzle.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Core.CombinationDialPuzzle.html",
    "title": "Class CombinationDialPuzzle | |",
    "keywords": "Class CombinationDialPuzzle Namespace Studio23.SS2.PuzzleSystem.Core public class CombinationDialPuzzle : IDialPuzzle, IPuzzle Inheritance object CombinationDialPuzzle Implements IDialPuzzle IPuzzle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CombinationDialPuzzle(DialPuzzleInfo) public CombinationDialPuzzle(DialPuzzleInfo puzzleInfo) Parameters puzzleInfo DialPuzzleInfo Fields _dialSelectionHorizontally public bool _dialSelectionHorizontally Field Value bool Properties Dials Puzzle all dials information. public IDial[] Dials { get; set; } Property Value IDial[] IsPuzzleStarted Puzzle current status. stop user to start a puzzle if it is already started. public bool IsPuzzleStarted { get; set; } Property Value bool PuzzleHints Gets or sets the list of hints for the puzzle. public List<PuzzleHints> PuzzleHints { get; set; } Property Value List<PuzzleHints> PuzzleInfo public DialPuzzleInfo PuzzleInfo { get; set; } Property Value DialPuzzleInfo SelectedDial public int SelectedDial { get; set; } Property Value int SelectedDialIndex Currently selected dial. public int SelectedDialIndex { get; } Property Value int StartTime Gets or sets the start time when the puzzle is initialized. public DateTime StartTime { get; } Property Value DateTime Methods AdjustDial(Direction) Handles player input to move the dial. public void AdjustDial(Direction direction) Parameters direction Direction AdjustDial(Vector2) Handles player input to move the dial. public void AdjustDial(Vector2 input) Parameters input Vector2 Input vector representing player movement. AdjustDialWithValue(Direction, int) Handles player input to move the dial. public void AdjustDialWithValue(Direction direction, int newValue = 0) Parameters direction Direction newValue int NewValue representing selected dial target value CheckPuzzleSolved() public bool CheckPuzzleSolved() Returns bool DialIndexValueChanged(BaseDialInfo) protected void DialIndexValueChanged(BaseDialInfo dialIndexInfo) Parameters dialIndexInfo BaseDialInfo ForceSolvePuzzle(bool) public UniTask ForceSolvePuzzle(bool instant) Parameters instant bool Returns UniTask PopulateDial(IDial[]) public void PopulateDial(IDial[] dials) Parameters dials IDial[] ResetPuzzle() Resets the puzzle to its initial state, clearing any progress made by the player. Invokes OnPuzzleReset event. public void ResetPuzzle() SetCurrentValues(List<int>) Updates the current values of the puzzle dials and checks if the puzzle is solved. public void SetCurrentValues(List<int> newCurrentValues) Parameters newCurrentValues List<int> The new values for the puzzle dials. SetCurrentValues(int, int) Updates the value of a specific dial at the given index and checks if the puzzle is solved. public void SetCurrentValues(int index, int newCurrentValue) Parameters index int This index positioned value will be updated newCurrentValue int The new value for the currentValue item SetUpDialSelectionOrientation(bool) public void SetUpDialSelectionOrientation(bool isHorizontalOrientation = true) Parameters isHorizontalOrientation bool SetupPuzzle(DialPuzzleInfo) Initializes the puzzle with puzzle information. you can use constructor instead of this method. public void SetupPuzzle(DialPuzzleInfo puzzleInfo) Parameters puzzleInfo DialPuzzleInfo ShowHint() Provides a hint or clue to the player, aiding them in solving the puzzle. Useful for UI feedback. public void ShowHint() StartPuzzle() Initiates the puzzle, allowing the player to interact with it and attempt to solve it. Shows puzzle visuals. Subscribes to the dials event. public void StartPuzzle() StopPuzzle() Allows the player to exit the puzzle, ending their current session. Hides visual puzzle. Useful for UI action. Unsubscribes dials event. public void StopPuzzle() Events OnDialUpdated public event Action<BaseDialInfo> OnDialUpdated Event Type Action<BaseDialInfo> OnPuzzleSolved Fired when Puzzle is Solved first time public event Action OnPuzzleSolved Event Type Action OnPuzzleStart Triggered when the puzzle is started public event Action OnPuzzleStart Event Type Action OnPuzzleStop Triggered when the puzzle is stop public event Action OnPuzzleStop Event Type Action OnSelectedDialChanged Event triggered when dial selection changed. public event Action<int> OnSelectedDialChanged Event Type Action<int>"
  },
  "api/Studio23.SS2.PuzzleSystem.Core.DialController.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Core.DialController.html",
    "title": "Class DialController | |",
    "keywords": "Class DialController Namespace Studio23.SS2.PuzzleSystem.Core public class DialController : IDial Inheritance object DialController Implements IDial Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DialController(BaseDialInfo) public DialController(BaseDialInfo dialIndexInfo) Parameters dialIndexInfo BaseDialInfo Properties DialIndexInfo Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. public BaseDialInfo DialIndexInfo { get; set; } Property Value BaseDialInfo Methods AdjustValue(int) Updates/Sets the dial to a new value while rotating or moving. Invokes the OnValueChanged event. public void AdjustValue(int adjustAmount) Parameters adjustAmount int New value for the dial. SetValue(int) public void SetValue(int value) Parameters value int"
  },
  "api/Studio23.SS2.PuzzleSystem.Core.Vector2Extensions.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Core.Vector2Extensions.html",
    "title": "Class Vector2Extensions | |",
    "keywords": "Class Vector2Extensions Namespace Studio23.SS2.PuzzleSystem.Core public static class Vector2Extensions Inheritance object Vector2Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDirection(Vector2) public static Direction GetDirection(this Vector2 input) Parameters input Vector2 Returns Direction"
  },
  "api/Studio23.SS2.PuzzleSystem.Core.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Core.html",
    "title": "Namespace Studio23.SS2.PuzzleSystem.Core | |",
    "keywords": "Namespace Studio23.SS2.PuzzleSystem.Core Classes CombinationDialPuzzle DialController Vector2Extensions"
  },
  "api/Studio23.SS2.PuzzleSystem.Data.BaseDialInfo.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.BaseDialInfo.html",
    "title": "Class BaseDialInfo | |",
    "keywords": "Class BaseDialInfo Namespace Studio23.SS2.PuzzleSystem.Data Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. public class BaseDialInfo Inheritance object BaseDialInfo Derived DialAngleInfo DialIndexInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentValue Gets or sets the current value of the dial. public int CurrentValue { get; } Property Value int IndexID Gets or sets the unique identifier of the dial. Unchangeable after set it up. public int IndexID { get; set; } Property Value int MaxValue Gets or sets the maximum value the dial can have. public int MaxValue { get; set; } Property Value int MinValue Gets or sets the minimum value the dial can have. public int MinValue { get; set; } Property Value int Methods AdjustValue(int) Adjusts the value of the dial by the specified amount. This method fires the OnValueChanged event. public virtual int AdjustValue(int value) Parameters value int The amount by which the dial value will be adjusted. Returns int SetCurrentValue(int) protected void SetCurrentValue(int currentVal) Parameters currentVal int SetValue(int) Adjusts the value of the dial by the specified amount. This method fires the OnValueChanged event. public virtual void SetValue(int value) Parameters value int The amount by which the dial value will be adjusted. Events OnValueChanged Event triggered when the value of the dial changes, indicating player interaction or manipulation. public event Action<BaseDialInfo> OnValueChanged Event Type Action<BaseDialInfo>"
  },
  "api/Studio23.SS2.PuzzleSystem.Data.DialAngleInfo.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.DialAngleInfo.html",
    "title": "Class DialAngleInfo | |",
    "keywords": "Class DialAngleInfo Namespace Studio23.SS2.PuzzleSystem.Data Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. public class DialAngleInfo : BaseDialInfo Inheritance object BaseDialInfo DialAngleInfo Inherited Members BaseDialInfo.IndexID BaseDialInfo.CurrentValue BaseDialInfo.MinValue BaseDialInfo.MaxValue BaseDialInfo.OnValueChanged BaseDialInfo.SetCurrentValue(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DialAngleInfo(int, int, int, int) Initializes a new instance of the DialIndexInfo class with the specified properties. public DialAngleInfo(int indexID, int currentValue, int minValue, int maxValue) Parameters indexID int The unique identifier of the dial. Unchangeable after setup. currentValue int The current value of the dial. minValue int The minimum value the dial can have. maxValue int The maximum value the dial can have. Methods AdjustValue(int) Adjusts the value of the dial by the specified amount. This method fires the OnValueChanged event. public override int AdjustValue(int value) Parameters value int The amount by which the dial value will be adjusted. Returns int SetValue(int) Adjusts the value of the dial by the specified amount. This method fires the OnValueChanged event. public override void SetValue(int value) Parameters value int The amount by which the dial value will be adjusted."
  },
  "api/Studio23.SS2.PuzzleSystem.Data.DialIndexInfo.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.DialIndexInfo.html",
    "title": "Class DialIndexInfo | |",
    "keywords": "Class DialIndexInfo Namespace Studio23.SS2.PuzzleSystem.Data Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. public class DialIndexInfo : BaseDialInfo Inheritance object BaseDialInfo DialIndexInfo Inherited Members BaseDialInfo.IndexID BaseDialInfo.CurrentValue BaseDialInfo.MinValue BaseDialInfo.MaxValue BaseDialInfo.OnValueChanged BaseDialInfo.SetCurrentValue(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DialIndexInfo(int, int, int, int) Initializes a new instance of the DialIndexInfo class with the specified properties. public DialIndexInfo(int indexID, int currentValue, int minValue, int maxValue) Parameters indexID int The unique identifier of the dial. Unchangeable after setup. currentValue int The current value of the dial. minValue int The minimum value the dial can have. maxValue int The maximum value the dial can have. Methods AdjustValue(int) Adjusts the value of the dial by the specified amount. This method fires the OnValueChanged event. public override int AdjustValue(int value) Parameters value int The amount by which the dial value will be adjusted. Returns int SetValue(int) Adjusts the value of the dial by the specified amount. This method fires the OnValueChanged event. public override void SetValue(int value) Parameters value int The amount by which the dial value will be adjusted."
  },
  "api/Studio23.SS2.PuzzleSystem.Data.DialPuzzleInfo.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.DialPuzzleInfo.html",
    "title": "Class DialPuzzleInfo | |",
    "keywords": "Class DialPuzzleInfo Namespace Studio23.SS2.PuzzleSystem.Data Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. public class DialPuzzleInfo Inheritance object DialPuzzleInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DialPuzzleInfo(string, int, int, List<int>, List<int>, List<PuzzleHints>) Initializes a new instance of the PuzzleInfo class with the specified properties. public DialPuzzleInfo(string puzzleName, int minValue, int maxValue, List<int> resultValues, List<int> currentValues, List<PuzzleHints> puzzleHints) Parameters puzzleName string minValue int maxValue int resultValues List<int> currentValues List<int> puzzleHints List<PuzzleHints> Properties CurrentValues Gets or sets the list of current values of the puzzle dials. public List<int> CurrentValues { get; set; } Property Value List<int> IsPuzzleSolved Gets or sets a value indicating whether the puzzle is solved. public bool IsPuzzleSolved { get; } Property Value bool MaxValue Gets or sets the maximum values of the puzzle dials. public int MaxValue { get; set; } Property Value int MinValue Gets or sets the minimum values of the puzzle dials. public int MinValue { get; set; } Property Value int PuzzleHints Gets or sets the list of hints for the puzzle. public List<PuzzleHints> PuzzleHints { get; set; } Property Value List<PuzzleHints> PuzzleName Gets or sets the name of the puzzle. public string PuzzleName { get; set; } Property Value string PuzzleTime Gets the time puzzle has been elapsed in seconds. public float PuzzleTime { get; } Property Value float ResultValues Gets or sets the list of correct values for the puzzle. public List<int> ResultValues { get; set; } Property Value List<int> StartTime Gets or sets the start time when the puzzle is initialized. public DateTime StartTime { get; } Property Value DateTime Methods CheckPuzzleSolved() public bool CheckPuzzleSolved() Returns bool SetCurrentValues(List<int>) Updates the current values of the puzzle dials and checks if the puzzle is solved. public void SetCurrentValues(List<int> newCurrentValues) Parameters newCurrentValues List<int> The new values for the puzzle dials. SetCurrentValues(int, int) Updates the value of a specific dial at the given index and checks if the puzzle is solved. public void SetCurrentValues(int index, int newCurrentValue) Parameters index int This index positioned value will be updated newCurrentValue int The new value for the currentValue item Validate() Validates the puzzle information. public bool Validate() Returns bool True if the puzzle information is valid, otherwise false."
  },
  "api/Studio23.SS2.PuzzleSystem.Data.Direction.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.Direction.html",
    "title": "Enum Direction | |",
    "keywords": "Enum Direction Namespace Studio23.SS2.PuzzleSystem.Data public enum Direction Fields Down = 3 Left = 0 Right = 1 Up = 2"
  },
  "api/Studio23.SS2.PuzzleSystem.Data.PuzzleHints.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.PuzzleHints.html",
    "title": "Class PuzzleHints | |",
    "keywords": "Class PuzzleHints Namespace Studio23.SS2.PuzzleSystem.Data Represents a hint for the puzzle, containing a message and a symbol. public class PuzzleHints Inheritance object PuzzleHints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message Gets or sets the hint message. public string Message { get; set; } Property Value string Symbol Gets or sets the symbol associated with the hint. public Sprite Symbol { get; set; } Property Value Sprite"
  },
  "api/Studio23.SS2.PuzzleSystem.Data.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.html",
    "title": "Namespace Studio23.SS2.PuzzleSystem.Data | |",
    "keywords": "Namespace Studio23.SS2.PuzzleSystem.Data Classes BaseDialInfo Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. DialAngleInfo Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. DialIndexInfo Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. DialPuzzleInfo Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. PuzzleHints Represents a hint for the puzzle, containing a message and a symbol. Enums Direction"
  },
  "api/Studio23.SS2.PuzzleSystem.Interface.IDial.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Interface.IDial.html",
    "title": "Interface IDial | |",
    "keywords": "Interface IDial Namespace Studio23.SS2.PuzzleSystem.Interface Interface for a dial that can be rotated, moved, selected, and deselected by the player. public interface IDial Properties DialIndexInfo Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. BaseDialInfo DialIndexInfo { get; set; } Property Value BaseDialInfo Methods AdjustValue(int) Updates/Sets the dial to a new value while rotating or moving. Invokes the OnValueChanged event. void AdjustValue(int adjustAmount) Parameters adjustAmount int New value for the dial. SetValue(int) void SetValue(int value) Parameters value int"
  },
  "api/Studio23.SS2.PuzzleSystem.Interface.IDialPuzzle.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Interface.IDialPuzzle.html",
    "title": "Interface IDialPuzzle | |",
    "keywords": "Interface IDialPuzzle Namespace Studio23.SS2.PuzzleSystem.Interface Interface for puzzle interactions. public interface IDialPuzzle : IPuzzle Inherited Members IPuzzle.StartTime IPuzzle.PuzzleTime IPuzzle.ResetPuzzle() IPuzzle.StartPuzzle() IPuzzle.ShowHint() IPuzzle.StopPuzzle() IPuzzle.IsPuzzleStarted IPuzzle.PuzzleHints IPuzzle.OnPuzzleStart IPuzzle.OnPuzzleStop IPuzzle.CheckPuzzleSolved() IPuzzle.ForceSolvePuzzle(bool) Properties Dials Puzzle all dials information. IDial[] Dials { get; set; } Property Value IDial[] PuzzleInfo DialPuzzleInfo PuzzleInfo { get; } Property Value DialPuzzleInfo SelectedDialIndex Currently selected dial. int SelectedDialIndex { get; } Property Value int Methods AdjustDial(Direction) Handles player input to move the dial. void AdjustDial(Direction input) Parameters input Direction Input vector representing player movement. AdjustDial(Vector2) Handles player input to move the dial. void AdjustDial(Vector2 input) Parameters input Vector2 Input vector representing player movement. AdjustDialWithValue(Direction, int) Handles player input to move the dial. void AdjustDialWithValue(Direction input, int newValue = 0) Parameters input Direction Input representing dial movement. newValue int NewValue representing selected dial target value SetCurrentValues(List<int>) Updates the current values of the puzzle dials and checks if the puzzle is solved. void SetCurrentValues(List<int> newCurrentValues) Parameters newCurrentValues List<int> The new values for the puzzle dials. SetCurrentValues(int, int) Updates the value of a specific dial at the given index and checks if the puzzle is solved. void SetCurrentValues(int index, int newCurrentValue) Parameters index int This index positioned value will be updated newCurrentValue int The new value for the currentValue item SetupPuzzle(DialPuzzleInfo) Initializes the puzzle with puzzle information. you can use constructor instead of this method. void SetupPuzzle(DialPuzzleInfo dialPuzzleInfo) Parameters dialPuzzleInfo DialPuzzleInfo Represents information about a puzzle, including its name, min-max value, result values, current values, solved status, hints, and solving time. Events OnDialUpdated event Action<BaseDialInfo> OnDialUpdated Event Type Action<BaseDialInfo> OnPuzzleSolved Fired when Puzzle is Solved first time event Action OnPuzzleSolved Event Type Action OnSelectedDialChanged Event triggered when dial selection changed. event Action<int> OnSelectedDialChanged Event Type Action<int>"
  },
  "api/Studio23.SS2.PuzzleSystem.Interface.IPuzzle.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Interface.IPuzzle.html",
    "title": "Interface IPuzzle | |",
    "keywords": "Interface IPuzzle Namespace Studio23.SS2.PuzzleSystem.Interface public interface IPuzzle Properties IsPuzzleStarted Puzzle current status. stop user to start a puzzle if it is already started. bool IsPuzzleStarted { get; set; } Property Value bool PuzzleHints Gets or sets the list of hints for the puzzle. List<PuzzleHints> PuzzleHints { get; set; } Property Value List<PuzzleHints> PuzzleTime Gets the time puzzle has been elapsed in seconds. float PuzzleTime { get; } Property Value float StartTime Gets or sets the start time when the puzzle is initialized. DateTime StartTime { get; } Property Value DateTime Methods CheckPuzzleSolved() bool CheckPuzzleSolved() Returns bool ForceSolvePuzzle(bool) UniTask ForceSolvePuzzle(bool instant) Parameters instant bool Returns UniTask ResetPuzzle() Resets the puzzle to its initial state, clearing any progress made by the player. Invokes OnPuzzleReset event. void ResetPuzzle() ShowHint() Provides a hint or clue to the player, aiding them in solving the puzzle. Useful for UI feedback. void ShowHint() StartPuzzle() Initiates the puzzle, allowing the player to interact with it and attempt to solve it. Shows puzzle visuals. Subscribes to the dials event. void StartPuzzle() StopPuzzle() Allows the player to exit the puzzle, ending their current session. Hides visual puzzle. Useful for UI action. Unsubscribes dials event. void StopPuzzle() Events OnPuzzleSolved event Action OnPuzzleSolved Event Type Action OnPuzzleStart Triggered when the puzzle is started event Action OnPuzzleStart Event Type Action OnPuzzleStop Triggered when the puzzle is stop event Action OnPuzzleStop Event Type Action"
  },
  "api/Studio23.SS2.PuzzleSystem.Interface.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Interface.html",
    "title": "Namespace Studio23.SS2.PuzzleSystem.Interface | |",
    "keywords": "Namespace Studio23.SS2.PuzzleSystem.Interface Interfaces IDial Interface for a dial that can be rotated, moved, selected, and deselected by the player. IDialPuzzle Interface for puzzle interactions. IPuzzle"
  },
  "api/Studio23.SS2.Sample.DemoPuzzleController.html": {
    "href": "api/Studio23.SS2.Sample.DemoPuzzleController.html",
    "title": "Class DemoPuzzleController | |",
    "keywords": "Class DemoPuzzleController Namespace Studio23.SS2.Sample public class DemoPuzzleController : MonoBehaviour Inheritance object DemoPuzzleController Methods ForceSolveHelper() public void ForceSolveHelper()"
  },
  "api/Studio23.SS2.Sample.PuzzleInputController.html": {
    "href": "api/Studio23.SS2.Sample.PuzzleInputController.html",
    "title": "Class PuzzleInputController | |",
    "keywords": "Class PuzzleInputController Namespace Studio23.SS2.Sample public class PuzzleInputController : MonoBehaviour Inheritance object PuzzleInputController Fields IsExit public bool IsExit Field Value bool IsOpen public bool IsOpen Field Value bool IsStart public bool IsStart Field Value bool Move public Vector2 Move Field Value Vector2 Methods OnExit(CallbackContext) public void OnExit(InputAction.CallbackContext context) Parameters context CallbackContext OnMove(CallbackContext) public void OnMove(InputAction.CallbackContext context) Parameters context CallbackContext OnOpen(CallbackContext) public void OnOpen(InputAction.CallbackContext context) Parameters context CallbackContext OnStart(CallbackContext) public void OnStart(InputAction.CallbackContext context) Parameters context CallbackContext Events OnExitAction public event Action<bool> OnExitAction Event Type Action<bool> OnMoveAction public event Action<Vector2> OnMoveAction Event Type Action<Vector2> OnOpenAction public event Action<bool> OnOpenAction Event Type Action<bool> OnStartAction public event Action<bool> OnStartAction Event Type Action<bool>"
  },
  "api/Studio23.SS2.Sample.html": {
    "href": "api/Studio23.SS2.Sample.html",
    "title": "Namespace Studio23.SS2.Sample | |",
    "keywords": "Namespace Studio23.SS2.Sample Classes DemoPuzzleController PuzzleInputController"
  },
  "api/Tests.EditMode.PuzzleSystemTests.html": {
    "href": "api/Tests.EditMode.PuzzleSystemTests.html",
    "title": "Class PuzzleSystemTests | |",
    "keywords": "Class PuzzleSystemTests Namespace Tests.EditMode public class PuzzleSystemTests Inheritance object PuzzleSystemTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CombinationPuzzle_MovePuzzle_UsingDirections() public void CombinationPuzzle_MovePuzzle_UsingDirections() CombinationPuzzle_MovePuzzle_UsingVector2() public void CombinationPuzzle_MovePuzzle_UsingVector2() CombinationPuzzle_StartPuzzle_ShouldSetIsPuzzleStartedToTrue() public void CombinationPuzzle_StartPuzzle_ShouldSetIsPuzzleStartedToTrue() CombinationPuzzle_StopPuzzle_ShouldSetIsPuzzleStartedToFalse() public void CombinationPuzzle_StopPuzzle_ShouldSetIsPuzzleStartedToFalse() DialInfo_AdjustValue_OutsideMaxRange_ShouldWrapAroundTMaxValue() public void DialInfo_AdjustValue_OutsideMaxRange_ShouldWrapAroundTMaxValue() DialInfo_AdjustValue_OutsideMaxRange_ShouldWrapAroundToMinValue() public void DialInfo_AdjustValue_OutsideMaxRange_ShouldWrapAroundToMinValue() DialInfo_AdjustValue_OutsideMinRange_ShouldWrapAroundToMaxValue() public void DialInfo_AdjustValue_OutsideMinRange_ShouldWrapAroundToMaxValue() DialInfo_AdjustValue_OutsideMinRange_ShouldWrapAroundToMinValue() public void DialInfo_AdjustValue_OutsideMinRange_ShouldWrapAroundToMinValue() DialInfo_AdjustValue_WithinRange_ShouldChangeValue() public void DialInfo_AdjustValue_WithinRange_ShouldChangeValue() PuzzleInfo_CheckPuzzleStatus_CorrectSolution_ShouldReturnTrue() public void PuzzleInfo_CheckPuzzleStatus_CorrectSolution_ShouldReturnTrue() PuzzleInfo_CheckPuzzleStatus_IncorrectSolution_ShouldReturnFalse() public void PuzzleInfo_CheckPuzzleStatus_IncorrectSolution_ShouldReturnFalse() PuzzleInfo_SetCurrentValues_OutsideRange_ShouldWrapInsideRange() public void PuzzleInfo_SetCurrentValues_OutsideRange_ShouldWrapInsideRange()"
  },
  "api/Tests.EditMode.html": {
    "href": "api/Tests.EditMode.html",
    "title": "Namespace Tests.EditMode | |",
    "keywords": "Namespace Tests.EditMode Classes PuzzleSystemTests"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "| |",
    "keywords": "1.0.9 (2024-08-01) Features Added Base class for complex dial puzzle which can be used for both index and angle dial puzzle Added Base class for dial info 1.0.2 (2023-10-17) Features folder structure and license updated 1.0.1 (2023-10-17) Features feedback fixing : code quality updated 1.0.0 (2023-10-17) Features Initial submission for package distribution. Sample Scene included. All script are tested."
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 Studio-23 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "PUZZLE SYSTEM | |",
    "keywords": "PUZZLE SYSTEM Puzzle System is a framework designed to manage interactive puzzles in game development. It provides a structured way to create, handle, and solve puzzles within a game environment. The Puzzle System described here includes components for defining puzzles, managing dial interactions, validating solutions, and providing hints to players. Our puzzle system is based on Lock & Key Puzzle Mechanics Lock & Key Puzzle System: An obstacle preventing the player from progressing when he needs a solution is a key to remove the lock. The puzzle's complexity is always the same. The Locker is a blocker system, it prevents game continuation. The correct combination of dials information is the key used to opening the Lock Table of Contents Installation Usage Installation Install via Git URL You can also use the \"Install from Git URL\" option from Unity Package Manager to install the package. https://github.com/Studio-23-xyz/puzzlesystem.git#upm Usage Stores each dials current value, minimum and maximum values, and unique identifiers, Manages puzzle information, including name, valid solution values, current values, solved status, hints, and solving time. Handles combination-based puzzles; allows adjustment of dial values, solution validation, and puzzle solving."
  }
}