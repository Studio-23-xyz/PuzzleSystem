{
  "api/DG.Tweening.DOTweenModuleAudio.html": {
    "href": "api/DG.Tweening.DOTweenModuleAudio.html",
    "title": "Class DOTweenModuleAudio | |",
    "keywords": "Class DOTweenModuleAudio Namespace DG.Tweening public static class DOTweenModuleAudio Inheritance object DOTweenModuleAudio Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DOFade(AudioSource, float, float) Tweens an AudioSource's volume to the given value. Also stores the AudioSource as the tween's target so it can be used for filtered operations public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration) Parameters target AudioSource endValue float The end value to reach (0 to 1) duration float The duration of the tween Returns TweenerCore<float, float, FloatOptions> DOPitch(AudioSource, float, float) Tweens an AudioSource's pitch to the given value. Also stores the AudioSource as the tween's target so it can be used for filtered operations public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration) Parameters target AudioSource endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<float, float, FloatOptions>"
  },
  "api/DG.Tweening.DOTweenModulePhysics.html": {
    "href": "api/DG.Tweening.DOTweenModulePhysics.html",
    "title": "Class DOTweenModulePhysics | |",
    "keywords": "Class DOTweenModulePhysics Namespace DG.Tweening public static class DOTweenModulePhysics Inheritance object DOTweenModulePhysics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DOJump(Rigidbody, Vector3, float, int, float, bool) Tweens a Rigidbody's position to the given value, while also applying a jump effect along the Y axis. Returns a Sequence instead of a Tweener. Also stores the Rigidbody as the tween's target so it can be used for filtered operations public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false) Parameters target Rigidbody endValue Vector3 The end value to reach jumpPower float Power of the jump (the max height of the jump is represented by this plus the final Y offset) numJumps int Total number of jumps duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns Sequence DOLocalPath(Rigidbody, Vector3[], float, PathType, PathMode, int, Color?) Tweens a Rigidbody's localPosition through the given path waypoints, using the chosen path algorithm. Also stores the Rigidbody as the tween's target so it can be used for filtered operations NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened. BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug). If you plan to publish there you should use a regular transform.DOLocalPath. public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = null, PathMode pathMode = null, int resolution = 10, Color? gizmoColor = null) Parameters target Rigidbody path Vector3[] The waypoint to go through duration float The duration of the tween pathType PathType The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points) pathMode PathMode The path mode: 3D, side-scroller 2D, top-down 2D resolution int The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive. Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints gizmoColor Color? The color of the path (shown when gizmos are active in the Play panel and the tween is running) Returns TweenerCore<Vector3, Path, PathOptions> DOLookAt(Rigidbody, Vector3, float, AxisConstraint, Vector3?) Tweens a Rigidbody's rotation so that it will look towards the given position. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = null, Vector3? up = null) Parameters target Rigidbody towards Vector3 The position to look at duration float The duration of the tween axisConstraint AxisConstraint Eventual axis constraint for the rotation up Vector3? The vector that defines in which direction up is (default: Vector3.up) Returns TweenerCore<Quaternion, Vector3, QuaternionOptions> DOMove(Rigidbody, Vector3, float, bool) Tweens a Rigidbody's position to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false) Parameters target Rigidbody endValue Vector3 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(Rigidbody, float, float, bool) Tweens a Rigidbody's X position to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false) Parameters target Rigidbody endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(Rigidbody, float, float, bool) Tweens a Rigidbody's Y position to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false) Parameters target Rigidbody endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(Rigidbody, float, float, bool) Tweens a Rigidbody's Z position to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false) Parameters target Rigidbody endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOPath(Rigidbody, Vector3[], float, PathType, PathMode, int, Color?) Tweens a Rigidbody's position through the given path waypoints, using the chosen path algorithm. Also stores the Rigidbody as the tween's target so it can be used for filtered operations. NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened. BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug). If you plan to publish there you should use a regular transform.DOPath. public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = null, PathMode pathMode = null, int resolution = 10, Color? gizmoColor = null) Parameters target Rigidbody path Vector3[] The waypoints to go through duration float The duration of the tween pathType PathType The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points) pathMode PathMode The path mode: 3D, side-scroller 2D, top-down 2D resolution int The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive. Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints gizmoColor Color? The color of the path (shown when gizmos are active in the Play panel and the tween is running) Returns TweenerCore<Vector3, Path, PathOptions> DORotate(Rigidbody, Vector3, float, RotateMode) Tweens a Rigidbody's rotation to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = null) Parameters target Rigidbody endValue Vector3 The end value to reach duration float The duration of the tween mode RotateMode Rotation mode Returns TweenerCore<Quaternion, Vector3, QuaternionOptions>"
  },
  "api/DG.Tweening.DOTweenModuleUnityVersion.html": {
    "href": "api/DG.Tweening.DOTweenModuleUnityVersion.html",
    "title": "Class DOTweenModuleUnityVersion | |",
    "keywords": "Class DOTweenModuleUnityVersion Namespace DG.Tweening Shortcuts/functions that are not strictly related to specific Modules but are available only on some Unity versions public static class DOTweenModuleUnityVersion Inheritance object DOTweenModuleUnityVersion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DG.Tweening.DOTweenModuleUtils.Physics.html": {
    "href": "api/DG.Tweening.DOTweenModuleUtils.Physics.html",
    "title": "Class DOTweenModuleUtils.Physics | |",
    "keywords": "Class DOTweenModuleUtils.Physics Namespace DG.Tweening public static class DOTweenModuleUtils.Physics Inheritance object DOTweenModuleUtils.Physics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateDOTweenPathTween(MonoBehaviour, bool, bool, Path, float, PathMode) public static TweenerCore<Vector3, Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, Path path, float duration, PathMode pathMode) Parameters target MonoBehaviour tweenRigidbody bool isLocal bool path Path duration float pathMode PathMode Returns TweenerCore<Vector3, Path, PathOptions> HasRigidbody(Component) public static bool HasRigidbody(Component target) Parameters target Component Returns bool HasRigidbody2D(Component) public static bool HasRigidbody2D(Component target) Parameters target Component Returns bool SetOrientationOnPath(PathOptions, Tween, Quaternion, Transform) public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans) Parameters options PathOptions t Tween newRot Quaternion trans Transform"
  },
  "api/DG.Tweening.DOTweenModuleUtils.html": {
    "href": "api/DG.Tweening.DOTweenModuleUtils.html",
    "title": "Class DOTweenModuleUtils | |",
    "keywords": "Class DOTweenModuleUtils Namespace DG.Tweening Utility functions that deal with available Modules. Modules defines: DOTAUDIO DOTPHYSICS DOTPHYSICS2D DOTSPRITE DOTUI Extra defines set and used for implementation of external assets: DOTWEEN_TMP ► TextMesh Pro DOTWEEN_TK2D ► 2D Toolkit public static class DOTweenModuleUtils Inheritance object DOTweenModuleUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init() Called via Reflection by DOTweenComponent on Awake public static void Init()"
  },
  "api/DG.Tweening.html": {
    "href": "api/DG.Tweening.html",
    "title": "Namespace DG.Tweening | |",
    "keywords": "Namespace DG.Tweening Classes DOTweenModuleAudio DOTweenModulePhysics DOTweenModuleUnityVersion Shortcuts/functions that are not strictly related to specific Modules but are available only on some Unity versions DOTweenModuleUtils Utility functions that deal with available Modules. Modules defines: DOTAUDIO DOTPHYSICS DOTPHYSICS2D DOTSPRITE DOTUI Extra defines set and used for implementation of external assets: DOTWEEN_TMP ► TextMesh Pro DOTWEEN_TK2D ► 2D Toolkit DOTweenModuleUtils.Physics"
  },
  "api/Studio23.SS2.PuzzleSystem.Core.CombinationPuzzle.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Core.CombinationPuzzle.html",
    "title": "Class CombinationPuzzle | |",
    "keywords": "Class CombinationPuzzle Namespace Studio23.SS2.PuzzleSystem.Core public class CombinationPuzzle : IPuzzle Inheritance object CombinationPuzzle Implements IPuzzle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CombinationPuzzle(PuzzleInfo) public CombinationPuzzle(PuzzleInfo puzzleInfo) Parameters puzzleInfo PuzzleInfo Fields OnPuzzleUnlocked public Action OnPuzzleUnlocked Field Value Action Properties Dials Puzzle all dials information. public IDial[] Dials { get; set; } Property Value IDial[] IsPuzzleStarted Puzzle current status. stop user to start a puzzle if it is already started. public bool IsPuzzleStarted { get; set; } Property Value bool PuzzleInfo Stores information about the puzzle's configuration, including its dials, hints, and solution. public PuzzleInfo PuzzleInfo { get; set; } Property Value PuzzleInfo SelectedDial Currently selected dial. public int SelectedDial { get; set; } Property Value int Methods AdjustDial(Direction) Handles player input to move the dial. public void AdjustDial(Direction direction) Parameters direction Direction AdjustDial(Vector2) Handles player input to move the dial. public void AdjustDial(Vector2 input) Parameters input Vector2 Input vector representing player movement. ResetPuzzle() Resets the puzzle to its initial state, clearing any progress made by the player. Invokes OnPuzzleReset event. public void ResetPuzzle() SetupPuzzle(PuzzleInfo) Initializes the puzzle with puzzle information. you can use constructor instead of this method. public void SetupPuzzle(PuzzleInfo puzzleInfo) Parameters puzzleInfo PuzzleInfo Represents information about a puzzle, including its name, min-max value, result values, current values, solved status, hints, and solving time. ShowHint() Provides a hint or clue to the player, aiding them in solving the puzzle. Useful for UI feedback. public void ShowHint() StartPuzzle() Initiates the puzzle, allowing the player to interact with it and attempt to solve it. Shows puzzle visuals. Subscribes to the dials event. public void StartPuzzle() StopPuzzle() Allows the player to exit the puzzle, ending their current session. Hides visual puzzle. Useful for UI action. Unsubscribes dials event. public void StopPuzzle() Events OnDialValueChanged public event Action<DialInfo> OnDialValueChanged Event Type Action<DialInfo> OnPuzzleStart Triggered when the puzzle is started public event Action OnPuzzleStart Event Type Action OnPuzzleStop Triggered when the puzzle is stop public event Action OnPuzzleStop Event Type Action OnSelectedDialChanged Event triggered when dial selection changed. public event Action<int> OnSelectedDialChanged Event Type Action<int>"
  },
  "api/Studio23.SS2.PuzzleSystem.Core.DialController.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Core.DialController.html",
    "title": "Class DialController | |",
    "keywords": "Class DialController Namespace Studio23.SS2.PuzzleSystem.Core public class DialController : IDial Inheritance object DialController Implements IDial Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DialController(DialInfo) public DialController(DialInfo dialInfo) Parameters dialInfo DialInfo Properties DialInfo Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. public DialInfo DialInfo { get; set; } Property Value DialInfo Methods AdjustValue(int) Updates/Sets the dial to a new value while rotating or moving. Invokes the OnValueChanged event. public void AdjustValue(int value) Parameters value int New value for the dial."
  },
  "api/Studio23.SS2.PuzzleSystem.Core.Vector2Extensions.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Core.Vector2Extensions.html",
    "title": "Class Vector2Extensions | |",
    "keywords": "Class Vector2Extensions Namespace Studio23.SS2.PuzzleSystem.Core public static class Vector2Extensions Inheritance object Vector2Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDirection(Vector2) public static Direction GetDirection(this Vector2 input) Parameters input Vector2 Returns Direction"
  },
  "api/Studio23.SS2.PuzzleSystem.Core.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Core.html",
    "title": "Namespace Studio23.SS2.PuzzleSystem.Core | |",
    "keywords": "Namespace Studio23.SS2.PuzzleSystem.Core Classes CombinationPuzzle DialController Vector2Extensions"
  },
  "api/Studio23.SS2.PuzzleSystem.Data.DialInfo.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.DialInfo.html",
    "title": "Class DialInfo | |",
    "keywords": "Class DialInfo Namespace Studio23.SS2.PuzzleSystem.Data Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. public class DialInfo Inheritance object DialInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DialInfo(int, int, int, int) Initializes a new instance of the DialInfo class with the specified properties. public DialInfo(int indexID, int currentValue, int minValue, int maxValue) Parameters indexID int The unique identifier of the dial. Unchangeable after setup. currentValue int The current value of the dial. minValue int The minimum value the dial can have. maxValue int The maximum value the dial can have. Properties CurrentValue Gets or sets the current value of the dial. public int CurrentValue { get; set; } Property Value int Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. IndexID Gets or sets the unique identifier of the dial. Unchangeable after set it up. public int IndexID { get; set; } Property Value int Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. MaxValue Gets or sets the maximum value the dial can have. public int MaxValue { get; set; } Property Value int Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. MinValue Gets or sets the minimum value the dial can have. public int MinValue { get; set; } Property Value int Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. Methods AdjustValue(int) Adjusts the value of the dial by the specified amount. This method fires the OnValueChanged event. public void AdjustValue(int value) Parameters value int The amount by which the dial value will be adjusted. Events OnValueChanged Event triggered when the value of the dial changes, indicating player interaction or manipulation. public event Action<DialInfo> OnValueChanged Event Type Action<DialInfo> Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value."
  },
  "api/Studio23.SS2.PuzzleSystem.Data.Direction.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.Direction.html",
    "title": "Enum Direction | |",
    "keywords": "Enum Direction Namespace Studio23.SS2.PuzzleSystem.Data public enum Direction Fields Down = 3 Left = 0 Right = 1 Up = 2"
  },
  "api/Studio23.SS2.PuzzleSystem.Data.PuzzleHints.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.PuzzleHints.html",
    "title": "Class PuzzleHints | |",
    "keywords": "Class PuzzleHints Namespace Studio23.SS2.PuzzleSystem.Data Represents a hint for the puzzle, containing a message and a symbol. public class PuzzleHints Inheritance object PuzzleHints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message Gets or sets the hint message. public string Message { get; set; } Property Value string Represents a hint for the puzzle, containing a message and a symbol. Symbol Gets or sets the symbol associated with the hint. public Sprite Symbol { get; set; } Property Value Sprite Represents a hint for the puzzle, containing a message and a symbol."
  },
  "api/Studio23.SS2.PuzzleSystem.Data.PuzzleInfo.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.PuzzleInfo.html",
    "title": "Class PuzzleInfo | |",
    "keywords": "Class PuzzleInfo Namespace Studio23.SS2.PuzzleSystem.Data Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. public class PuzzleInfo Inheritance object PuzzleInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PuzzleInfoExtensions.Validate(PuzzleInfo) Constructors PuzzleInfo(string, int, int, List<int>, List<int>, List<PuzzleHints>) Initializes a new instance of the PuzzleInfo class with the specified properties. public PuzzleInfo(string puzzleName, int minValue, int maxValue, List<int> resultValues, List<int> currentValues, List<PuzzleHints> puzzleHints) Parameters puzzleName string Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. minValue int Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. maxValue int Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. resultValues List<int> Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. currentValues List<int> Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. puzzleHints List<PuzzleHints> Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. Properties CurrentValues Gets or sets the list of current values of the puzzle dials. public List<int> CurrentValues { get; set; } Property Value List<int> Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. IsPuzzleSolved Gets or sets a value indicating whether the puzzle is solved. public bool IsPuzzleSolved { get; } Property Value bool Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. MaxValue Gets or sets the maximum values of the puzzle dials. public int MaxValue { get; set; } Property Value int Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. MinValue Gets or sets the minimum values of the puzzle dials. public int MinValue { get; set; } Property Value int Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. PuzzleHints Gets or sets the list of hints for the puzzle. public List<PuzzleHints> PuzzleHints { get; set; } Property Value List<PuzzleHints> Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. PuzzleName Gets or sets the name of the puzzle. public string PuzzleName { get; set; } Property Value string Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. PuzzleTime Gets the time puzzle has been elapsed in seconds. public float PuzzleTime { get; } Property Value float Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. ResultValues Gets or sets the list of correct values for the puzzle. public List<int> ResultValues { get; set; } Property Value List<int> Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. StartTime Gets or sets the start time when the puzzle is initialized. public DateTime StartTime { get; } Property Value DateTime Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. Methods CheckPuzzleSolved() public bool CheckPuzzleSolved() Returns bool Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. SetCurrentValues(List<int>) Updates the current values of the puzzle dials and checks if the puzzle is solved. public void SetCurrentValues(List<int> newCurrentValues) Parameters newCurrentValues List<int> The new values for the puzzle dials. SetCurrentValues(int, int) Updates the value of a specific dial at the given index and checks if the puzzle is solved. public void SetCurrentValues(int index, int newCurrentValue) Parameters index int This index positioned value will be updated newCurrentValue int The new value for the currentValue item"
  },
  "api/Studio23.SS2.PuzzleSystem.Data.PuzzleInfoExtensions.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.PuzzleInfoExtensions.html",
    "title": "Class PuzzleInfoExtensions | |",
    "keywords": "Class PuzzleInfoExtensions Namespace Studio23.SS2.PuzzleSystem.Data public static class PuzzleInfoExtensions Inheritance object PuzzleInfoExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Validate(PuzzleInfo) Validates the puzzle information. public static bool Validate(this PuzzleInfo puzzleInfo) Parameters puzzleInfo PuzzleInfo The puzzle information to validate. Returns bool True if the puzzle information is valid, otherwise false."
  },
  "api/Studio23.SS2.PuzzleSystem.Data.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Data.html",
    "title": "Namespace Studio23.SS2.PuzzleSystem.Data | |",
    "keywords": "Namespace Studio23.SS2.PuzzleSystem.Data Classes DialInfo Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. PuzzleHints Represents a hint for the puzzle, containing a message and a symbol. PuzzleInfo Represents information about a puzzle, including its name, result values, current values, solved status, hints, and solving time. PuzzleInfoExtensions Enums Direction"
  },
  "api/Studio23.SS2.PuzzleSystem.Interface.IDial.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Interface.IDial.html",
    "title": "Interface IDial | |",
    "keywords": "Interface IDial Namespace Studio23.SS2.PuzzleSystem.Interface Interface for a dial that can be rotated, moved, selected, and deselected by the player. public interface IDial Properties DialInfo Represents information about a dial, including its unique identifier, current value, minimum value, and maximum value. DialInfo DialInfo { get; set; } Property Value DialInfo Interface for a dial that can be rotated, moved, selected, and deselected by the player. Methods AdjustValue(int) Updates/Sets the dial to a new value while rotating or moving. Invokes the OnValueChanged event. void AdjustValue(int value) Parameters value int New value for the dial."
  },
  "api/Studio23.SS2.PuzzleSystem.Interface.IPuzzle.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Interface.IPuzzle.html",
    "title": "Interface IPuzzle | |",
    "keywords": "Interface IPuzzle Namespace Studio23.SS2.PuzzleSystem.Interface Interface for puzzle interactions. public interface IPuzzle Properties Dials Puzzle all dials information. IDial[] Dials { get; set; } Property Value IDial[] Interface for puzzle interactions. IsPuzzleStarted Puzzle current status. stop user to start a puzzle if it is already started. bool IsPuzzleStarted { get; set; } Property Value bool Interface for puzzle interactions. PuzzleInfo Stores information about the puzzle's configuration, including its dials, hints, and solution. PuzzleInfo PuzzleInfo { get; } Property Value PuzzleInfo Interface for puzzle interactions. SelectedDial Currently selected dial. int SelectedDial { get; set; } Property Value int Interface for puzzle interactions. Methods AdjustDial(Direction) Handles player input to move the dial. void AdjustDial(Direction input) Parameters input Direction Input vector representing player movement. AdjustDial(Vector2) Handles player input to move the dial. void AdjustDial(Vector2 input) Parameters input Vector2 Input vector representing player movement. ResetPuzzle() Resets the puzzle to its initial state, clearing any progress made by the player. Invokes OnPuzzleReset event. void ResetPuzzle() SetupPuzzle(PuzzleInfo) Initializes the puzzle with puzzle information. you can use constructor instead of this method. void SetupPuzzle(PuzzleInfo puzzleInfo) Parameters puzzleInfo PuzzleInfo Represents information about a puzzle, including its name, min-max value, result values, current values, solved status, hints, and solving time. ShowHint() Provides a hint or clue to the player, aiding them in solving the puzzle. Useful for UI feedback. void ShowHint() StartPuzzle() Initiates the puzzle, allowing the player to interact with it and attempt to solve it. Shows puzzle visuals. Subscribes to the dials event. void StartPuzzle() StopPuzzle() Allows the player to exit the puzzle, ending their current session. Hides visual puzzle. Useful for UI action. Unsubscribes dials event. void StopPuzzle() Events OnPuzzleStart Triggered when the puzzle is started event Action OnPuzzleStart Event Type Action Interface for puzzle interactions. OnPuzzleStop Triggered when the puzzle is stop event Action OnPuzzleStop Event Type Action Interface for puzzle interactions. OnSelectedDialChanged Event triggered when dial selection changed. event Action<int> OnSelectedDialChanged Event Type Action<int> Interface for puzzle interactions."
  },
  "api/Studio23.SS2.PuzzleSystem.Interface.html": {
    "href": "api/Studio23.SS2.PuzzleSystem.Interface.html",
    "title": "Namespace Studio23.SS2.PuzzleSystem.Interface | |",
    "keywords": "Namespace Studio23.SS2.PuzzleSystem.Interface Interfaces IDial Interface for a dial that can be rotated, moved, selected, and deselected by the player. IPuzzle Interface for puzzle interactions."
  },
  "api/Studio23.SS2.Sample.DemoPuzzleController.html": {
    "href": "api/Studio23.SS2.Sample.DemoPuzzleController.html",
    "title": "Class DemoPuzzleController | |",
    "keywords": "Class DemoPuzzleController Namespace Studio23.SS2.Sample public class DemoPuzzleController : MonoBehaviour Inheritance object DemoPuzzleController"
  },
  "api/Studio23.SS2.Sample.PuzzleInputController.html": {
    "href": "api/Studio23.SS2.Sample.PuzzleInputController.html",
    "title": "Class PuzzleInputController | |",
    "keywords": "Class PuzzleInputController Namespace Studio23.SS2.Sample public class PuzzleInputController : MonoBehaviour Inheritance object PuzzleInputController Fields IsExit public bool IsExit Field Value bool IsOpen public bool IsOpen Field Value bool IsStart public bool IsStart Field Value bool Move public Vector2 Move Field Value Vector2 Methods OnExit(CallbackContext) public void OnExit(InputAction.CallbackContext context) Parameters context CallbackContext OnMove(CallbackContext) public void OnMove(InputAction.CallbackContext context) Parameters context CallbackContext OnOpen(CallbackContext) public void OnOpen(InputAction.CallbackContext context) Parameters context CallbackContext OnStart(CallbackContext) public void OnStart(InputAction.CallbackContext context) Parameters context CallbackContext Events OnExitAction public event Action<bool> OnExitAction Event Type Action<bool> OnMoveAction public event Action<Vector2> OnMoveAction Event Type Action<Vector2> OnOpenAction public event Action<bool> OnOpenAction Event Type Action<bool> OnStartAction public event Action<bool> OnStartAction Event Type Action<bool>"
  },
  "api/Studio23.SS2.Sample.html": {
    "href": "api/Studio23.SS2.Sample.html",
    "title": "Namespace Studio23.SS2.Sample | |",
    "keywords": "Namespace Studio23.SS2.Sample Classes DemoPuzzleController PuzzleInputController"
  },
  "api/Tests.EditMode.PuzzleSystemTests.html": {
    "href": "api/Tests.EditMode.PuzzleSystemTests.html",
    "title": "Class PuzzleSystemTests | |",
    "keywords": "Class PuzzleSystemTests Namespace Tests.EditMode public class PuzzleSystemTests Inheritance object PuzzleSystemTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CombinationPuzzle_MovePuzzle_UsingDirections() public void CombinationPuzzle_MovePuzzle_UsingDirections() CombinationPuzzle_MovePuzzle_UsingVector2() public void CombinationPuzzle_MovePuzzle_UsingVector2() CombinationPuzzle_StartPuzzle_ShouldSetIsPuzzleStartedToTrue() public void CombinationPuzzle_StartPuzzle_ShouldSetIsPuzzleStartedToTrue() CombinationPuzzle_StopPuzzle_ShouldSetIsPuzzleStartedToFalse() public void CombinationPuzzle_StopPuzzle_ShouldSetIsPuzzleStartedToFalse() DialInfo_AdjustValue_OutsideMaxRange_ShouldWrapAroundTMaxValue() public void DialInfo_AdjustValue_OutsideMaxRange_ShouldWrapAroundTMaxValue() DialInfo_AdjustValue_OutsideMaxRange_ShouldWrapAroundToMinValue() public void DialInfo_AdjustValue_OutsideMaxRange_ShouldWrapAroundToMinValue() DialInfo_AdjustValue_OutsideMinRange_ShouldWrapAroundToMaxValue() public void DialInfo_AdjustValue_OutsideMinRange_ShouldWrapAroundToMaxValue() DialInfo_AdjustValue_OutsideMinRange_ShouldWrapAroundToMinValue() public void DialInfo_AdjustValue_OutsideMinRange_ShouldWrapAroundToMinValue() DialInfo_AdjustValue_WithinRange_ShouldChangeValue() public void DialInfo_AdjustValue_WithinRange_ShouldChangeValue() PuzzleInfo_CheckPuzzleStatus_CorrectSolution_ShouldReturnTrue() public void PuzzleInfo_CheckPuzzleStatus_CorrectSolution_ShouldReturnTrue() PuzzleInfo_CheckPuzzleStatus_IncorrectSolution_ShouldReturnFalse() public void PuzzleInfo_CheckPuzzleStatus_IncorrectSolution_ShouldReturnFalse() PuzzleInfo_SetCurrentValues_OutsideRange_ShouldWrapInsideRange() public void PuzzleInfo_SetCurrentValues_OutsideRange_ShouldWrapInsideRange()"
  },
  "api/Tests.EditMode.html": {
    "href": "api/Tests.EditMode.html",
    "title": "Namespace Tests.EditMode | |",
    "keywords": "Namespace Tests.EditMode Classes PuzzleSystemTests"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "| |",
    "keywords": "1.0.0 (2023-10-17) Features Initial submission for package distribution. Sample Scene included. All script are tested."
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": ""
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "PUZZLE SYSTEM | |",
    "keywords": "PUZZLE SYSTEM Puzzle System is a framework designed to manage interactive puzzles in game development. It provides a structured way to create, handle, and solve puzzles within a game environment. The Puzzle System described here includes components for defining puzzles, managing dial interactions, validating solutions, and providing hints to players. Our puzzle system is based on Lock & Key Puzzle Mechanics Lock & Key Puzzle System: An obstacle preventing the player from progressing when he needs a solution is a key to remove the lock. The puzzle's complexity is always the same. The Locker is a blocker system, it prevents game continuation. The correct combination of dials information is the key used to opening the Lock Table of Contents Installation Usage Installation Install via Git URL You can also use the \"Install from Git URL\" option from Unity Package Manager to install the package. https://github.com/Studio-23-xyz/puzzlesystem.git#upm Usage Stores each dials current value, minimum and maximum values, and unique identifiers, Manages puzzle information, including name, valid solution values, current values, solved status, hints, and solving time. Handles combination-based puzzles; allows adjustment of dial values, solution validation, and puzzle solving."
  }
}